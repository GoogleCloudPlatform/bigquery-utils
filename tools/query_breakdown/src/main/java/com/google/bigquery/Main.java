package com.google.bigquery;

import org.apache.commons.cli.*;

import java.io.IOException;
import java.util.Comparator;

/**
 * this file is the main file for the command line tool. The first argument is a txt file
 * containing the queries. The second argument, which is optional, is a time limit that we
 * impose on processing a single query. The third argument, which is optional, is a file
 * that we want to write the results to.
 */
public class Main {
  public static void main(String[] args) {
    String inputFile = null;
    int errorLimit = 0;
    String outputFile = null;
    CommandLine cl = createCommand(args);

    // if there is an error in parsing the commandline
    if (cl == null) {
      System.exit(1);
    }

    if (cl.hasOption("r")) {
      inputFile = cl.getOptionValue("r");
    }
    if (cl.hasOption("w")) {
      outputFile = cl.getOptionValue("w");
    }
    if (cl.hasOption("l")) {
      errorLimit = Integer.parseInt( cl.getOptionValue("l"));
    }

    // this is where we will put the file I/O logic through the input reader.
    String originalQuery = null;
    try {
      originalQuery = InputReader.readInput(inputFile);
    } catch (IOException e) {
      System.out.println("there was an I/O error while reading the input");
    }

    /* this is where we feed in the original query to the UnparseableDetector, which will find
       all the unparseable components of the query and output them into the output file if
       specified. Otherwise, it will be autogenerated.
     */
    QueryBreakdown.run(originalQuery, outputFile, errorLimit);
  }

  /**
   * This is the method that instantiates a CommandLine object for the Apache CLI Interface.
   * It deals with command line parsing as well as help generation once parsing is unavailable
   */
  public static CommandLine createCommand(String[] args) {
    CommandLineParser parser = new DefaultParser();
    Options options = createOptions();
    HelpFormatter help = new HelpFormatter();

    help.setOptionComparator(new Comparator<Option>() {
      public int compare(Option option1, Option option2) {
        if (option1.isRequired() != option2.isRequired()) {
          return option1.isRequired() ? -1 : 1;
        }
        else {
          return (option1.getLongOpt().equals("write")) ? -1 : 1;
        }
      }
    });

    CommandLine cl = null;
    try {
      cl = parser.parse(options, args);
    } catch (ParseException e) {
      System.out.println("there was an issue parsing the commandline" + e.getMessage());
      help.printHelp("query_breakdown", options, true);
    }

    return cl;
  }

  /**
   * This is the method that instantiates options for the Apache CLI interface
   */
  public static Options createOptions() {
    Options options = new Options();
    options.addOption(Option.builder("r").required(true).longOpt("read").hasArg(true)
        .argName("PATH").desc("this is the file containing queries to be inputted into the tool")
        .build());
    options.addOption(Option.builder("w").longOpt("write").hasArg(true).argName("PATH")
        .desc("this is the file that the tool can write its results to").build());
    options.addOption(Option.builder("l").longOpt("limit").hasArg(true).argName("INTEGER")
        .desc("this is the limit for how many errors can be recovered").build());
    return options;
  }
}
