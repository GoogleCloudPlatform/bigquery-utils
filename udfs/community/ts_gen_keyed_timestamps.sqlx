config { hasOutput: true }
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
* Generate an array of key-timestamp structs with the specified min, max and interval timeseries
* Example Usage:
* SELECT *
* FROM UNNEST(bqutil.fn.ts_gen_keyed_timestamp(['abc'], 900, '2020-01-01', '2020-01-02') a
* LEFT JOIN dataset.table ON a.series_key = a.key AND a.tumble_val = b.timestamp
*/

-- ts_gen_keyed_timestamps:
-- Input:
-- keys: strings that are cross joined with the generated timestamps
-- tumble_seconds: the windowing interval for each generated timestamp
-- min_ts: the inclusive lower bound for the generated timestamps, normalized by the tumble_seconds
-- max_ts: the inclusive upper bound for the generated timestamps, normalized by the tumble_seconds
-- Output: An array of generated timestamps for each key - ARRAY<STRUCT<series_key STRING, tumble_seconds TIMESTAMP>>
CREATE OR REPLACE FUNCTION ${self()}(keys ARRAY<STRING>, tumble_seconds INT64, min_ts TIMESTAMP, max_ts Timestamp)
RETURNS ARRAY<STRUCT<series_key STRING, tumble_val TIMESTAMP>> AS ((
  SELECT ARRAY_AGG(x)
  FROM (
    SELECT series_key, tumble_val
    FROM UNNEST(
      GENERATE_TIMESTAMP_ARRAY(
        ${ref("ts_tumble")}(min_ts, tumble_seconds),
        ${ref("ts_tumble")}(max_ts, tumble_seconds),
        INTERVAL tumble_seconds SECOND
      )
    ) AS tumble_val
    CROSS JOIN UNNEST(keys) AS series_key
  ) x
));
