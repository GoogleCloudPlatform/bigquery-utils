int:
  - test:
    input: CAST(-1 AS STRING)
    expected_output: CAST(-1 AS INT64)
  - test:
    input: CAST(1 AS INT64)
    expected_output: CAST(1 AS INT64)
  - test:
    input: CAST(2.5 AS FLOAT64)
    expected_output: CAST(2 AS INT64)
  - test:
    input: CAST(7 AS INT64)
    expected_output: CAST(7 AS INT64)
  - test:
    input: CAST(7.8 AS FLOAT64)
    expected_output: CAST(7 AS INT64)
json_typeof:
  - test:
    input: ('""')
    expected_output: ('string')
  - test:
    input: ('"test"')
    expected_output: ('string')
  - test:
    input: ('true')
    expected_output: ('boolean')
  - test:
    input: ('false')
    expected_output: ('boolean')
  - test:
    input: ('null')
    expected_output: ('null')
  - test:
    input: ('0')
    expected_output: ('number')
  - test:
    input: ('1')
    expected_output: ('number')
  - test:
    input: ('-1')
    expected_output: ('number')
  - test:
    input: ('0.0')
    expected_output: ('number')
  - test:
    input: ('1.0')
    expected_output: ('number')
  - test:
    input: ('-1.0')
    expected_output: ('number')
  - test:
    input: ('1e1')
    expected_output: ('number')
  - test:
    input: ('-1e1')
    expected_output: ('number')
  - test:
    input: ('[]')
    expected_output: ('array')
  - test:
    input: ('[1, 2, 3]')
    expected_output: ('array')
  - test:
    input: ('{}')
    expected_output: ('object')
  - test:
    input: ('{"foo":"bar"}')
    expected_output: ('object')
  - test:
    input: ('')
    expected_output: (NULL)
typeof:
  - test:
    input: (b'test')
    expected_output: ('BYTES')
  - test:
    input: (b'')
    expected_output: ('BYTES')
  - test:
    input: ('test')
    expected_output: ('STRING')
  - test:
    input: ('')
    expected_output: ('STRING')
  - test:
    input: (TRUE)
    expected_output: ('BOOL')
  - test:
    input: (FALSE)
    expected_output: ('BOOL')
  - test:
    input: (NULL)
    expected_output: ('NULL')
  - test:
    input: (1)
    expected_output: ('INT64')
  - test:
    input: (-1)
    expected_output: ('INT64')
  - test:
    input: (0)
    expected_output: ('INT64')
  - test:
    input: (0.0)
    expected_output: ('FLOAT64')
  - test:
    input: (-1.0)
    expected_output: ('FLOAT64')
  - test:
    input: (1.0)
    expected_output: ('FLOAT64')
  - test:
    input: (+123e45)
    expected_output: ('FLOAT64')
  - test:
    input: (-123e45)
    expected_output: ('FLOAT64')
  - test:
    input: (12e345)
    expected_output: ('FLOAT64')
  - test:
    input: (-12e345)
    expected_output: ('FLOAT64')
  - test:
    input: CAST('inf' AS FLOAT64)
    expected_output: ('FLOAT64')
  - test:
    input: CAST('-inf' AS FLOAT64)
    expected_output: ('FLOAT64')
  - test:
    input: CAST('nan' AS FLOAT64)
    expected_output: ('FLOAT64')
  - test:
    input: DATE '1970-01-01'
    expected_output: ('DATE')
  - test:
    input: DATETIME '1970-01-01T00:00:00'
    expected_output: ('DATETIME')
  - test:
    input: TIME '00:00:00'
    expected_output: ('TIME')
  - test:
    input: TIMESTAMP '1970-01-01T00:00:00Z'
    expected_output: ('TIMESTAMP')
  - test:
    input: STRUCT()
    expected_output: ('STRUCT')
  - test:
    input: STRUCT(1)
    expected_output: ('STRUCT')
  - test:
    input: STRUCT(1, 2, 3)
    expected_output: ('STRUCT')
  - test:
    input: STRUCT<a INT64, b INT64, c INT64>(1, 2, 3)
    expected_output: ('STRUCT')
  - test:
    input: ([])
    expected_output: ('ARRAY')
  - test:
    input: ([1, 2, 3])
    expected_output: ('ARRAY')
  - test:
    input: ARRAY<INT64>[1, 2, 3]
    expected_output: ('ARRAY')
  - test:
    input: ST_GEOGPOINT(0, 0)
    expected_output: ('GEOGRAPHY')
  - test:
    input: NUMERIC '0'
    expected_output: ('NUMERIC')
  - test:
    input: NUMERIC '1'
    expected_output: ('NUMERIC')
  - test:
    input: NUMERIC '-1'
    expected_output: ('NUMERIC')
url_parse:
  - test: # HOST extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('HOST' AS STRING)
    expected_output: CAST('facebook.com' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('HOST' AS STRING)
    expected_output: CAST('facebook.com' AS STRING)
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('HOST' AS STRING)
    expected_output: CAST('subdomain.facebook.com' AS STRING)
  - test: # PATH extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PATH' AS STRING)
    expected_output: CAST('path1/p.php' AS STRING)
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PATH' AS STRING)
    expected_output: CAST('path1/p.php' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('PATH' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
  - test: # QUERY extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('QUERY' AS STRING)
    expected_output: CAST('k1=v1&k2=v2#Ref1' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('QUERY' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('QUERY' AS STRING)
    expected_output: CAST('k1=v1&k2=v2#Ref1' AS STRING)
  - test: # REF extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('REF' AS STRING)
    expected_output: CAST('Ref1' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('REF' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('REF' AS STRING)
    expected_output: CAST('Ref1' AS STRING)
  - test: # PROTOCOL extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PROTOCOL' AS STRING)
    expected_output: CAST('http' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('PROTOCOL' AS STRING)
    expected_output: CAST('rpc' AS STRING)
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PROTOCOL' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
last_day:
  - test:
    input: CAST("1987-12-25" AS DATE)
    expected_output: CAST("1987-12-31" AS DATE)
  - test:
    input: CAST("1998-09-04" AS DATE)
    expected_output: CAST("1998-09-30" AS DATE)
  - test:
    input: CAST("2020-02-21" AS DATE)
    expected_output: CAST("2020-02-29" AS DATE) # leap year
  - test:
    input: CAST("2019-02-21" AS DATE)
    expected_output: CAST("2019-02-28" AS DATE) # non-leap year
percentage_change:
  - test:
    input: CAST(0.2 AS FLOAT64), CAST(0.4 AS FLOAT64)
    expected_output: CAST(1.0 AS FLOAT64)
  - test:
    input: CAST(5 AS NUMERIC), CAST(15 AS NUMERIC)
    expected_output: CAST(2.0 AS FLOAT64)
  - test:
    input: CAST(100 AS INT64), CAST(50 AS INT64)
    expected_output: CAST(-0.5 AS FLOAT64)
  - test:
    input: CAST(-20 AS INT64), CAST(-45 AS INT64)
    expected_output: CAST(-1.25 AS FLOAT64)
  - test:
    input: CAST(0 AS INT64), CAST(0 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(10 AS INT64), CAST(0 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(10 AS INT64), CAST(NULL AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(0 AS FLOAT64), CAST(10 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(NULL AS INT64), CAST(10 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
percentage_difference:
  - test:
    input: CAST(0.22222222 AS FLOAT64), CAST(0.88888888 AS FLOAT64)
    expected_output: CAST(1.2 AS FLOAT64)
  - test:
    input: CAST(0.2 AS NUMERIC), CAST(0.8 AS NUMERIC)
    expected_output: CAST(1.2 AS FLOAT64)
  - test:
    input: CAST(2 AS INT64), CAST(8 AS INT64)
    expected_output: CAST(1.2 AS FLOAT64)
  - test:
    input: CAST(100 AS INT64), CAST(200 AS INT64)
    expected_output: CAST(0.6667 AS FLOAT64)
  - test:
    input: CAST(-2 AS INT64), CAST(8 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(2 AS INT64), CAST(-8 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(0 AS INT64), CAST(0 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(0 AS INT64), CAST(100 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(100 AS INT64), CAST(0 AS INT64)
    expected_output: CAST(NULL AS FLOAT64)
  - test:
    input: CAST(1.0 AS FLOAT64), CAST(1000000000 AS INT64)
    expected_output: CAST(2.0 AS FLOAT64)
 
