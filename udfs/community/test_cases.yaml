int:
  - test:
    input: CAST(-1 AS STRING)
    expected_output: CAST(-1 AS INT64)
  - test:
    input: CAST(1 AS INT64)
    expected_output: CAST(1 AS INT64)
  - test:
    input: CAST(2.5 AS FLOAT64)
    expected_output: CAST(2 AS INT64)
  - test:
    input: CAST(7 AS INT64)
    expected_output: CAST(7 AS INT64)
  - test:
    input: CAST(7.8 AS FLOAT64)
    expected_output: CAST(7 AS INT64)
typeof:
  - test:
    input: (b'test')
    expected_output: ('BYTES')
  - test:
    input: (b'')
    expected_output: ('BYTES')
  - test:
    input: ('test')
    expected_output: ('STRING')
  - test:
    input: ('')
    expected_output: ('STRING')
  - test:
    input: (TRUE)
    expected_output: ('BOOL')
  - test:
    input: (FALSE)
    expected_output: ('BOOL')
  - test:
    input: (NULL)
    expected_output: ('NULL')
  - test:
    input: (1)
    expected_output: ('INT64')
  - test:
    input: (-1)
    expected_output: ('INT64')
  - test:
    input: (0)
    expected_output: ('INT64')
  - test:
    input: (0.0)
    expected_output: ('FLOAT64')
  - test:
    input: (-1.0)
    expected_output: ('FLOAT64')
  - test:
    input: (1.0)
    expected_output: ('FLOAT64')
  - test:
    input: (+123e45)
    expected_output: ('FLOAT64')
  - test:
    input: (-123e45)
    expected_output: ('FLOAT64')
  - test:
    input: (12e345)
    expected_output: ('FLOAT64')
  - test:
    input: (-12e345)
    expected_output: ('FLOAT64')
  - test:
    input: CAST('inf' AS FLOAT64)
    expected_output: ('FLOAT64')
  - test:
    input: CAST('-inf' AS FLOAT64)
    expected_output: ('FLOAT64')
  - test:
    input: CAST('nan' AS FLOAT64)
    expected_output: ('FLOAT64')
  - test:
    input: DATE '1970-01-01'
    expected_output: ('DATE')
  - test:
    input: DATETIME '1970-01-01T00:00:00'
    expected_output: ('DATETIME')
  - test:
    input: TIME '00:00:00'
    expected_output: ('TIME')
  - test:
    input: TIMESTAMP '1970-01-01T00:00:00Z'
    expected_output: ('TIMESTAMP')
  - test:
    input: STRUCT()
    expected_output: ('STRUCT')
  - test:
    input: STRUCT(1)
    expected_output: ('STRUCT')
  - test:
    input: STRUCT(1, 2, 3)
    expected_output: ('STRUCT')
  - test:
    input: STRUCT<a INT64, b INT64, c INT64>(1, 2, 3)
    expected_output: ('STRUCT')
  - test:
    input: ([])
    expected_output: ('ARRAY')
  - test:
    input: ([1, 2, 3])
    expected_output: ('ARRAY')
  - test:
    input: ARRAY<INT64>[1, 2, 3]
    expected_output: ('ARRAY')
  - test:
    input: ST_GEOGPOINT(0, 0)
    expected_output: ('GEOGRAPHY')
  - test:
    input: NUMERIC '0'
    expected_output: ('NUMERIC')
  - test:
    input: NUMERIC '1'
    expected_output: ('NUMERIC')
  - test:
    input: NUMERIC '-1'
    expected_output: ('NUMERIC')
url_parse:
  - test: # HOST extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('HOST' AS STRING)
    expected_output: CAST('facebook.com' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('HOST' AS STRING)
    expected_output: CAST('facebook.com' AS STRING)
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('HOST' AS STRING)
    expected_output: CAST('subdomain.facebook.com' AS STRING)
  - test: # PATH extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PATH' AS STRING)
    expected_output: CAST('path1/p.php' AS STRING)
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PATH' AS STRING)
    expected_output: CAST('path1/p.php' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('PATH' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
  - test: # QUERY extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('QUERY' AS STRING)
    expected_output: CAST('k1=v1&k2=v2#Ref1' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('QUERY' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('QUERY' AS STRING)
    expected_output: CAST('k1=v1&k2=v2#Ref1' AS STRING)
  - test: # REF extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('REF' AS STRING)
    expected_output: CAST('Ref1' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('REF' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('REF' AS STRING)
    expected_output: CAST('Ref1' AS STRING)
  - test: # PROTOCOL extraction
    input: CAST('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PROTOCOL' AS STRING)
    expected_output: CAST('http' AS STRING)
  - test:
    input: CAST('rpc://facebook.com/' AS STRING), CAST('PROTOCOL' AS STRING)
    expected_output: CAST('rpc' AS STRING)
  - test:
    input: CAST('subdomain.facebook.com/path1/p.php?k1=v1&k2=v2#Ref1' AS STRING), CAST('PROTOCOL' AS STRING)
    expected_output: (NULL) # NULL is a type in YAML so wrap it in parenthesis
