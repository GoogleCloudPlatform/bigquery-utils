config { hasOutput: true }

/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- Computes the p value of the Fisher exact test 
-- PARAMETERES: a,b,c,d (values of 2x2 contingency table [[a,b];[c,d]] )
CREATE OR REPLACE FUNCTION ${self()}(a FLOAT64, b FLOAT64, c FLOAT64, d FLOAT64) 
RETURNS FLOAT64 
LANGUAGE js AS """
var gl_LnF =  [0.000000000000, 0.000000000000,0.693147180560,1.791759469228,3.178053830348,4.787491742782,6.579251212010,8.525161361065,10.604602902745,12.801827480081,15.104412573076,17.502307845874,19.987214495662,22.552163853123,25.191221182739,27.899271383841,30.671860106081,33.505073450137,36.395445208033,39.339884187199,42.335616460753,45.380138898477,48.471181351835,51.606675567764,54.784729398112,58.003605222981,61.261701761002,64.557538627006,67.889743137182,71.257038967168,74.658236348830,78.092223553315,81.557959456115,85.054467017582,88.580827542198,92.136175603687,95.719694542143,99.330612454787,102.968198614514,106.631760260643,110.320639714757,114.034211781462,117.771881399745,121.533081515439,125.317271149357,129.123933639127,132.952575035616,136.802722637326,140.673923648234,144.565743946345,148.477766951773,152.409592584497,156.360836303079,160.331128216631,164.320112263195,168.327445448428,172.352797139163,176.395848406997,180.456291417544,184.533828861450,188.628173423672,192.739047287845,196.866181672890,201.009316399282,205.168199482641,209.342586752537,213.532241494563,217.736934113954,221.956441819130,226.190548323728,230.439043565777,234.701723442818,238.978389561834,243.268849002983,247.572914096187,251.890402209723,256.221135550010,260.564940971863,264.921649798553,269.291097651020,273.673124285694,278.067573440366,282.474292687630,286.893133295427,291.323950094270,295.766601350761,300.220948647014,304.686856765669,309.164193580147,313.652829949879,318.152639620209,322.663499126726,327.185287703775,331.717887196929,336.261181979199,340.815058870799,345.379407062267,349.954118040770,354.539085519441,359.134205369576,363.739375555564,368.354496072405,372.979468885689,377.614197873919,382.258588773060,386.912549123218,391.575988217330,396.248817051792,400.930948278916,405.622296161145,410.322776526937,415.032306728250,419.750805599545,424.478193418257,429.214391866652,433.959323995015,438.712914186121,443.475088120919,448.245772745385,453.024896238496,457.812387981278,462.608178526875,467.412199571608,472.224383926981,477.044665492586,481.872979229888,486.709261136840,491.553448223298,496.405478487218,501.265290891579,506.132825342035,511.008022665236,515.890824587823,520.781173716044,525.679013515995,530.584288294434,535.496943180170,540.416924105998,545.344177791155,550.278651724286,555.220294146895,560.169054037273,565.124881094874,570.087725725134,575.057539024710,580.034272767131,585.017879388839,590.008311975618,595.005524249382,600.009470555328,605.020105849424,610.037385686239,615.061266207085,620.091704128478,625.128656730891,630.172081847810,635.221937855060,640.278183660408,645.340778693435,650.409682895655,655.484856710889,660.566261075874,665.653857411106,670.747607611913,675.847474039737,680.953419513638,686.065407301994,691.183401114411,696.307365093814,701.437263808737,706.573062245788,711.714725802290,716.862220279104,722.015511873601,727.174567172816,732.339353146739,737.509837141778,742.685986874351,747.867770424643,753.055156230484,758.248113081374,763.446610112640,768.650616799717,773.860102952558,779.075038710167,784.295394535246,789.521141208959,794.752249825813,799.988691788643,805.230438803703,810.477462875864,815.729736303910,820.987231675938,826.249921864843,831.517780023906,836.790779582470,842.068894241700,847.352097970438,852.640365001133,857.933669825857,863.231987192405,868.535292100465,873.843559797866,879.156765776907,884.474885770752,889.797895749890,895.125771918680,900.458490711945,905.796028791646,911.138363043611,916.485470574329,921.837328707805,927.193914982477,932.555207148186,937.921183163208,943.291821191336,948.667099599020,954.046996952560,959.431492015349,964.820563745166,970.214191291518,975.612353993036,981.015031374908,986.422203146368,991.833849198224,997.249949600428,1002.670484599700,1008.095434617182,1013.524780246136,1018.958502249690,1024.396581558614,1029.838999269135,1035.285736640802,1040.736775094367,1046.192096209725,1051.651681723869,1057.115513528895,1062.583573670030,1068.055844343702,1073.532307895633,1079.012946818975,1084.497743752466,1089.986681478623,1095.479742921963,1100.976911147256,1106.478169357801,1111.983500893733,1117.492889230361,1123.006317976526,1128.523770872991,1134.045231790853,1139.570684729985,1145.100113817497,1150.633503306224,1156.170837573243,1161.712101118401,1167.257278562881,1172.806354647776,1178.359314232698,1183.916142294397,1189.476823925413,1195.041344332735,1200.609688836497,1206.181842868674,1211.757791971821,1217.337521797807,1222.921018106589,1228.508266764989,1234.099253745500,1239.693965125102,1245.292387084100,1250.894505904980,1256.500307971276,1262.109779766461,1267.722907872849,1273.339678970516,1278.960079836233,1284.584097342420,1290.211718456111,1295.842930237932,1301.477719841101,1307.116074510435,1312.757981581373,1318.403428479016,1324.052402717178,1329.704891897446,1335.360883708266,1341.020365924026,1346.683326404162,1352.349753092274,1358.019634015255,1363.692957282426,1369.369711084694,1375.049883693712,1380.733463461050,1386.420438817390,1392.110798271714,1397.804530410517,1403.501623897022,1409.202067470413,1414.905849945069,1420.612960209818,1426.323387227193,1432.037120032702,1437.754147734109,1443.474459510716,1449.198044612669,1454.924892360256,1460.654992143229,1466.388333420127,1472.124905717606,1477.864698629786,1483.607701817595,1489.353905008135,1495.103297994044,1500.855870632869,1506.611612846456,1512.370514620334,1518.132566003114,1523.897757105899,1529.666078101692,1535.437519224822,1541.212070770367,1546.989723093589,1552.770466609382,1558.554291791712,1564.341189173078,1570.131149343976,1575.924162952360,1581.720220703125,1587.519313357586,1593.321431732963,1599.126566701879,1604.934709191860,1610.745850184837,1616.559980716662,1622.377091876625,1628.197174806977,1634.020220702460,1639.846220809841,1645.675166427451,1651.507048904734,1657.341859641797,1663.179590088963,1669.020231746336,1674.863776163368,1680.710214938425,1686.559539718372,1692.411742198147,1698.266814120349,1704.124747274832,1709.985533498298,1715.849164673896,1721.715632730830,1727.584929643963,1733.457047433439,1739.331978164291,1745.209713946070,1751.090246932471,1756.973569320959,1762.859673352410,1768.748551310742,1774.640195522568,1780.534598356833,1786.431752224470,1792.331649578052,1798.234282911453,1804.139644759508,1810.047727697677,1815.958524341718,1821.872027347356,1827.788229409963,1833.707123264236,1839.628701683880,1845.552957481295,1851.479883507265,1857.409472650655,1863.341717838103,1869.276612033723,1875.214148238805,1881.154319491525,1887.097118866652,1893.042539475259,1898.990574464439,1904.941217017027,1910.894460351315,1916.850297720780,1922.808722413809,1928.769727753433,1934.733307097051,1940.699453836175,1946.668161396160,1952.639423235951,1958.613232847820,1964.589583757118,1970.568469522019,1976.549883733273,1982.533820013961,1988.520272019245,1994.509233436135,2000.500697983243,2006.494659410550,2012.491111499169,2018.490048061115,2024.491462939077,2030.495350006183,2036.501703165785,2042.510516351228,2048.521783525632,2054.535498681675,2060.551655841373,2066.570249055869,2072.591272405219,2078.614719998180,2084.640585972005,2090.668864492236,2096.699549752497,2102.732635974296,2108.768117406820,2114.805988326742,2120.846243038020,2126.888875871703,2132.933881185739,2138.981253364785,2145.030986820017,2151.083075988941,2157.137515335211,2163.194299348439,2169.253422544021,2175.314879462949,2181.378664671636,2187.444772761740,2193.513198349984,2199.583936077986,2205.656980612087,2211.732326643176,2217.809968886525,2223.889902081621,2229.972120991997,2236.056620405072,2242.143395131985,2248.232440007431,2254.323749889509,2260.417319659554,2266.513144221987,2272.611218504153,2278.711537456173,2284.814096050787,2290.918889283202,2297.025912170944,2303.135159753709,2309.246627093211,2315.360309273044,2321.476201398527,2327.594298596568,2333.714596015519,2339.837088825033,2345.961772215927,2352.088641400042,2358.217691610102,2364.348918099585,2370.482316142582,2376.617881033664,2382.755608087750,2388.895492639976,2395.037530045563,2401.181715679689,2407.328044937358,2413.476513233276,2419.627116001722,2425.779848696426,2431.934706790443,2438.091685776028,2444.250781164521,2450.411988486216,2456.575303290250,2462.740721144482,2468.908237635370,2475.077848367861,2481.249548965272,2487.423335069174,2493.599202339280,2499.777146453331,2505.957163106983,2512.139248013700,2518.323396904638,2524.509605528538,2530.697869651621,2536.888185057474,2543.080547546949,2549.274952938054,2555.471397065849,2561.669875782341,2567.870384956384,2574.072920473571,2580.277478236140,2586.484054162865,2592.692644188961,2598.903244265986,2605.115850361738,2611.330458460160];

var A_LNF_SIZE = 500;

function LnHyperGeometric( a, b, c, d) {
      return  gl_LnF[a+b] + gl_LnF[c+d] + gl_LnF[a+c] + gl_LnF[b+d] - gl_LnF[a] - gl_LnF[b] - gl_LnF[c] - gl_LnF[d] - gl_LnF[a + b + c + d]  ;
  }
  
function lngamm(z)
// Reference: "Lanczos, C. 'A precision approximation 
// of the gamma function', J. SIAM Numer. Anal., B, 1, 86-96, 1964."
// Translation of  Alan Miller's FORTRAN-implementation
// See http://lib.stat.cmu.edu/apstat/245
{
  var x = 0;
  x += 0.1659470187408462e-06/(z+7);
  x += 0.9934937113930748e-05/(z+6);
  x -= 0.1385710331296526    /(z+5);
  x += 12.50734324009056     /(z+4);
  x -= 176.6150291498386     /(z+3);
  x += 771.3234287757674     /(z+2);
  x -= 1259.139216722289     /(z+1);
  x += 676.5203681218835     /(z);
  x += 0.9999999999995183;
  return(Math['log'](x)-5.58106146679532777-z+(z-0.5)*Math['log'](z+6.5));
}
function lnfact(n)
{
  if(n<=1) return(0);
  return(lngamm(n+1));
}  
  
function LynHyperGoe_appr( a, b, c, d ) {
     // gl_LnF[a+b] + gl_LnF[c+d] + gl_LnF[a+c] + gl_LnF[b+d] - gl_LnF[a] - gl_LnF[b] - gl_LnF[c] - gl_LnF[d] - gl_LnF[a + b + c + d] 
     var temp = -lnfact(a+b+c+d) ;
     
     if ((a+b) < A_LNF_SIZE)  {temp = temp + gl_LnF[a+b];} 
     else {temp = temp + lnfact(a+b);}
     
     if ((c+d) < A_LNF_SIZE)  {temp = temp + gl_LnF[c+d];}
     else {temp = temp + lnfact(c+d) ;}
     
     if ((a+c) < A_LNF_SIZE)  {temp = temp + gl_LnF[a+c];}
     else {temp = temp + lnfact(a+c);}
     
     if ((b+d) < A_LNF_SIZE)  {temp = temp + gl_LnF[b+d];} 
     else {temp = temp + lnfact(b+d);}
     
     if ( a < A_LNF_SIZE)  {temp = temp - gl_LnF[a];}
     else {temp = temp - lnfact(a);}
     
     if ( b < A_LNF_SIZE)  {temp = temp - gl_LnF[b];} 
     else {temp = temp - lnfact(b);}
     
     if ( c < A_LNF_SIZE)  {temp = temp - gl_LnF[c];}
     else {temp = temp - lnfact(c);}
     
     if ( d < A_LNF_SIZE)  {temp = temp - gl_LnF[d];} 
     else {temp = temp - lnfact(d);}
     
     return( temp );
}
  
  var n = Math['round'](a + b + c + d);

  var temp = 0 ;
  var LnPrx = 0.0 ;
  var n1_ = a+b ;
  var n_1 = a+c ;
  var n_21 = d-a;
  var min = 0 ;
  if ( d < a ) {
      min = -1 * n_21; 
  }
  var max = n1_ ;
  if ( c < b ){
     max = n_1 ;
  }
  
  if ( n <= A_LNF_SIZE ) {
     var LnPra = LnHyperGeometric( a, b, c, d) ;
     for (x = min; x <= max; x++) {       
        LnPrx = LnHyperGeometric( x , n1_ - x, n_1 - x, n_21 +x) ;
        if ( LnPrx <= LnPra ) { 
            temp = temp + Math['exp']( LnPrx - LnPra );
        }         
     }
  } else {
     var LnPra = LynHyperGoe_appr( a, b, c, d) ; 
     LnPrx = (min, n1_-min, n_1-min, n_21+min);
     if ( LnPrx <= LnPra ) { 
            temp = temp + Math['exp']( LnPrx - LnPra );
     }
     for (x = min+1; x <= max; x++) {
        if (! (x % 10 == 0)  ) {
           LnPrx = LnPrx + Math['log']( ((n_1 - x +1)/x)*(n1_ -x +1)/( n_21 + x) )     ;
        }
        else {
           LnPrx = LynHyperGoe_appr(x, n1_-x, n_1-x, n_21+x);
        }
        if ( LnPrx <= LnPra ) { 
            temp = temp + Math['exp']( LnPrx - LnPra );
        }
     }
  }
  
  var LnPFET = LnPra  + Math['log']( temp ); 
  return  Math['exp']( LnPFET ) ;
""";

