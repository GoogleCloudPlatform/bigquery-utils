config { hasOutput: true }
/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

CREATE OR REPLACE FUNCTION ${self()}(name STRING, attributes ARRAY<STRUCT<name STRING, value STRING>>, data ARRAY<STRING>) RETURNS STRING
OPTIONS (
    description="""Returns string representation of XML element with given tag name, attributes and data.
For example, cw_xml_element_with_attributes('v', array[struct('a', 42)], array['x', '&amp;', 'y'])
will be converted to '<v a="42">x&amp;y</v>'.

If a particular attribute name is null then entire (name,value) pair is not serialized.

All the string values in data must be XML escaped."""
)
AS (
  (
    WITH
      t AS (
        SELECT
          COALESCE(
            ' '
              || NULLIF(
                TRIM(STRING_AGG(COALESCE(a.name || '="' || NULLIF(a.value, '') || '"', ''), ' ')),
                '')
              || ' ',
            '') AS attributes
        FROM UNNEST(attributes) a
      )
    SELECT
      '<' || name || ANY_VALUE(t.attributes) || '>' || STRING_AGG(COALESCE(v, ''), '') || '</'
      || name || '>'
    FROM t
    CROSS JOIN UNNEST(data) v
  )
);
