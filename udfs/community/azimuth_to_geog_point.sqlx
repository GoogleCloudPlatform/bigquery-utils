config { hasOutput: true }
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- Forms BigQuery GEOGRAPHY point (latitude and longitude) from input latitude, longitude, azimuth, and distance (in miles)
CREATE OR REPLACE FUNCTION ${self()}(input_lat FLOAT64, input_lon FLOAT64, azimuth FLOAT64, distance FLOAT64)
RETURNS GEOGRAPHY
OPTIONS (
  description="Forms BigQuery GEOGRAPHY point (latitude and longitude) from input latitude, longitude, azimuth, and distance (in miles)"
)
AS ((
  with variables as (
    select acos(-1) as pi, 180/acos(-1) as rad2deg, acos(-1)/180 as deg2rag, 6378.1 as earth_radius_km, 1.61 as miles_in_km
  )
  select ST_GeogPOINT(
    rad2deg*(input_lon * deg2rag + (atan2(sin(azimuth * deg2rag) * sin(distance * miles_in_km/earth_radius_km) * cos(input_lat * deg2rag), cos(distance * miles_in_km/earth_radius_km) - sin(input_lat * deg2rag) * sin(rad2deg * (asin(sin(input_lat * deg2rag) * cos(distance * miles_in_km/earth_radius_km) + cos(input_lat * deg2rag) * sin(distance * miles_in_km/earth_radius_km) * cos(azimuth * deg2rag))))))), 
    rad2deg*(asin(sin(input_lat * deg2rag) * cos(distance * miles_in_km/earth_radius_km) + cos(input_lat * deg2rag) * sin(distance * miles_in_km/earth_radius_km) * cos(azimuth * deg2rag)))
  )
  from variables
));
