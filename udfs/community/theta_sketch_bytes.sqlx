config { hasOutput: true }
/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

CREATE OR REPLACE AGGREGATE FUNCTION ${self()}(x BYTES, lg_k INT64 NOT AGGREGATE)
RETURNS BYTES
LANGUAGE js
OPTIONS (
  library=["${JS_BUCKET}/theta_sketch.mjs"],
  description='''Aggregates bytes_col, log_k args and returns a theta sketch.
This function can also be used for initializing theta sketch for string cols. 
Just CAST( string_col AS BYTES FORMAT \'UTF-8\') and pass to this function.
For more details: https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html'''
) AS '''
import ModuleFactory from "${JS_BUCKET}/theta_sketch.mjs";

var Module = await ModuleFactory();

// Helper definitions

// shared buffer for serialization and deserialization
var BUFFER = {
  ptr: 0,
  size: 0,
};

// allocate a shared buffer for passing strings/bytes
var STRMAX = 256;
var STRBUF = Module._malloc(STRMAX);

function maxSize(lg_k) {
  // see https://datasketches.apache.org/docs/Theta/ThetaSize.html
  return 8 + 24 + 16 * (1 << lg_k);
}

function requireBuffer(size) {
  if (BUFFER.size < size) {
    releaseBuffer();
    BUFFER.ptr = Module._malloc(size);
    BUFFER.size = size;
  }
  return BUFFER;
}

function releaseBuffer() {
  if (BUFFER.ptr) {
    Module._free(BUFFER.ptr);
  }
  BUFFER.ptr = 0;
  BUFFER.size = 0;
}

function destroyState(state) {
  if (state.sketch) {
    Module._update_sketch_destroy(state.sketch);
    state.sketch = 0;
  }
  if (state.union) {
    Module._theta_union_destroy(state.union);
    state.union = 0;
  }
  state.serialized = null;
}

function updateUnion(union, bytes) {
  var buffer = requireBuffer(bytes.length);
  Module.HEAPU8.subarray(buffer.ptr, buffer.ptr + buffer.size).set(bytes);
  Module._theta_union_update_buffer(union, buffer.ptr, bytes.length);
}

// UDAF interface
export function initialState(lg_k) {
  lg_k = Module._clamp_lg_k(lg_k);
  return {
    sketch: Module._update_sketch_initialize(lg_k),
    lg_k: lg_k,
    serialized: null,
    union: 0,
  };
}

export function aggregate(state, arg) {
  if (!state.sketch) {
    state.sketch = Module._update_sketch_initialize(state.lg_k);
  }

  // make sure that the argument will fit into the string buffer
  if (arg.length > STRMAX) {
    // allocate a bigger buffer
    Module._free(STRBUF);
    while (arg.length >= STRMAX) {
      STRMAX *= 2;
    }
    STRBUF = Module._malloc(STRMAX);
  }

  Module.HEAPU8.subarray(STRBUF, STRBUF + arg.length).set(arg);
  Module._theta_sketch_update_bytes(state.sketch, STRBUF, arg.length);
}

export function serialize(state) {
  var buffer = requireBuffer(maxSize(state.lg_k));
  var len = 0;
  try {
    if (state.sketch && state.serialized) {
      // merge aggregated and serialized state
      Module.HEAPU8
        .subarray(buffer.ptr, buffer.ptr + buffer.size)
        .set(state.serialized);

      len = Module._theta_combined_update_serialized(
          buffer.ptr, buffer.size, state.serialized.length,
          state.sketch, state.lg_k);
    } else if (state.sketch) {
      len = Module._update_sketch_serialize(
          state.sketch, buffer.ptr, buffer.size);
    } else if (state.union) {
      len = Module._theta_union_serialize_sketch(
          state.union, buffer.ptr, buffer.size);
    } else if (state.serialized) {
      return {
        lg_k: state.lg_k,
        bytes: state.serialized,
      };
    } else {
      throw new Error(
          "Unexpected state in serialization " + JSON.stringify(state));
    }
    return {
      lg_k: state.lg_k,
      bytes: Module.HEAPU8.slice(buffer.ptr , buffer.ptr + len),
    };
  } finally {
    destroyState(state);
  }
}

export function deserialize(serialized) {
  return {
    sketch: 0,
    union: 0,
    serialized: serialized.bytes,
    lg_k: serialized.lg_k,
  };
}

// Possible states:
// - first (or only) merge, union is absent on left hand side
// - iterative merge, union is present on left hand side
//   - union should be absent on the right hand side
//   - should we defend against this?
// - merge-after-update, sketch is present on left or right hand side
// - merge-after-serialize, serialized is present on left or right hand side
export function merge(state, other_state) {
  if (!state.union) {
    state.union = Module._theta_union_initialize(state.lg_k);
  }

  if (state.sketch) {
    Module._theta_union_update_sketch(state.union, state.sketch);
    Module._update_sketch_destroy(state.sketch);
    state.sketch = 0;
  }

  if (state.serialized) {
    // consume it
    updateUnion(state.union, state.serialized);
    state.serialized = null;
  }

  if (other_state.union) {
    throw new Error("other_state should not have union during merge()");
  }
  if (!other_state.sketch && !other_state.serialized) {
    throw new Error("Expected sketch on other_state");
  }

  if (other_state.sketch) {
    Module._theta_union_update_sketch(state.union, other_state.sketch);
    Module._update_sketch_destroy(other_state.sketch);
    other_state.sketch = 0;
  }

  if (other_state.serialized) {
    updateUnion(state.union, other_state.serialized);
    other_state.serialized = null;
  }
}

export function finalize(state) {
  var result = serialize(state);
  return result.bytes;
}
''';